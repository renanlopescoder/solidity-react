{"ast":null,"code":"import Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\nexport const loadWeb3 = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    window.alert(\"Non-Ethereum brower detected. You should consider trying MetaMask!\");\n  }\n};\n\nconst loadContract = async data => {\n  // MetaMask Network ID\n  const networkId = await web3.eth.net.getId();\n  const contractData = data.networks[networkId];\n  let contract;\n\n  if (contractData) {\n    contract = new web3.eth.Contract(data.abi, contractData.address);\n  } else {\n    window.alert(\"Contract not deployed to detected network\");\n  }\n\n  return contract;\n};\n\nexport const getBlockchainData = async () => {\n  if (!window.web3.eth) {\n    await loadWeb3();\n  }\n\n  const web3 = window.web3;\n  const [account] = await web3.eth.getAccounts();\n  const ethBalance = await web3.eth.getBalance(account);\n  const ethBalanceData = {\n    wei: ethBalance,\n    balance: web3.utils.fromWei(ethBalance, \"Ether\")\n  };\n  const token = await loadContract(Token);\n  const tokenBalance = await token.methods.balanceOf(account).call();\n  const tokenBalanceData = {\n    wei: tokenBalance,\n    balance: web3.utils.fromWei(tokenBalance, \"Ether\")\n  };\n  return {\n    account,\n    ethBalanceData,\n    tokenBalanceData\n  };\n};\nexport const buyTokens = async (account, etherAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const etherWei = window.web3.utils.toWei(etherAmount);\n  const hash = await ethSwapContract.methods.buyTokens().send({\n    from: account,\n    value: etherWei\n  });\n  location.reload();\n  return hash;\n};\nexport const sellTokens = async (account, tokenAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const tokenWei = window.web3.utils.toWei(tokenAmount);\n  const tokenContract = await loadContract(Token);\n  console.log(ethSwapContract._address);\n  await tokenContract.methods.approve(ethSwapContract._address, tokenWei).send({\n    from: account\n  });\n  const hash = await ethSwapContract.methods.sellTokens(tokenWei).send({\n    from: account\n  });\n  location.reload();\n  return hash;\n};","map":{"version":3,"sources":["/Users/renanlopes/Documents/workspace/witcher/solidity-react/src/services/blockchain-service.js"],"names":["Web3","EthSwap","Token","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadContract","data","networkId","eth","net","getId","contractData","networks","contract","Contract","abi","address","getBlockchainData","account","getAccounts","ethBalance","getBalance","ethBalanceData","wei","balance","utils","fromWei","token","tokenBalance","methods","balanceOf","call","tokenBalanceData","buyTokens","etherAmount","ethSwapContract","etherWei","toWei","hash","send","from","value","location","reload","sellTokens","tokenAmount","tokenWei","tokenContract","console","log","_address","approve"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\n\nexport const loadWeb3 = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    window.alert(\n      \"Non-Ethereum brower detected. You should consider trying MetaMask!\",\n    );\n  }\n};\n\nconst loadContract = async (data) => {\n  // MetaMask Network ID\n  const networkId = await web3.eth.net.getId();\n\n  const contractData = data.networks[networkId];\n  let contract;\n  if (contractData) {\n    contract = new web3.eth.Contract(data.abi, contractData.address);\n  } else {\n    window.alert(\"Contract not deployed to detected network\");\n  }\n\n  return contract;\n};\n\nexport const getBlockchainData = async () => {\n  if (!window.web3.eth) {\n    await loadWeb3();\n  }\n\n  const web3 = window.web3;\n  const [account] = await web3.eth.getAccounts();\n\n  const ethBalance = await web3.eth.getBalance(account);\n  const ethBalanceData = {\n    wei: ethBalance,\n    balance: web3.utils.fromWei(ethBalance, \"Ether\"),\n  };\n\n  const token = await loadContract(Token);\n  const tokenBalance = await token.methods.balanceOf(account).call();\n\n  const tokenBalanceData = {\n    wei: tokenBalance,\n    balance: web3.utils.fromWei(tokenBalance, \"Ether\"),\n  };\n\n  return {\n    account,\n    ethBalanceData,\n    tokenBalanceData,\n  };\n};\n\nexport const buyTokens = async (account, etherAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const etherWei = window.web3.utils.toWei(etherAmount);\n\n  const hash = await ethSwapContract.methods\n    .buyTokens()\n    .send({ from: account, value: etherWei });\n  location.reload();\n\n  return hash;\n};\n\nexport const sellTokens = async (account, tokenAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const tokenWei = window.web3.utils.toWei(tokenAmount);\n\n  const tokenContract = await loadContract(Token);\n  console.log(ethSwapContract._address);\n  await tokenContract.methods\n    .approve(ethSwapContract._address, tokenWei)\n    .send({ from: account });\n\n  const hash = await ethSwapContract.methods\n    .sellTokens(tokenWei)\n    .send({ from: account });\n\n  location.reload();\n\n  return hash;\n};\n"]},"metadata":{},"sourceType":"module"}