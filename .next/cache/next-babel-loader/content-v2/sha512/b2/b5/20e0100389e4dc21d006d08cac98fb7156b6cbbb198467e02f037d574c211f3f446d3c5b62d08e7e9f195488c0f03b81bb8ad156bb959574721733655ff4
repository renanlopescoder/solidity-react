{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert(\"Non-Ethereum brower detected. You should consider trying MetaMask!\");\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar loadContract = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n    var networkId, contractData, contract;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.net.getId();\n\n          case 2:\n            networkId = _context2.sent;\n            contractData = data.networks[networkId];\n\n            if (contractData) {\n              contract = new web3.eth.Contract(data.abi, contractData.address);\n            } else {\n              window.alert(\"Contract not deployed to detected network\");\n            }\n\n            return _context2.abrupt(\"return\", contract);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadContract(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport var getBlockchainData = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var web3, _yield$web3$eth$getAc, _yield$web3$eth$getAc2, account, ethBalance, ethBalanceData, token, tokenBalance, tokenBalanceData;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (window.web3.eth) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return loadWeb3();\n\n          case 3:\n            web3 = window.web3;\n            _context3.next = 6;\n            return web3.eth.getAccounts();\n\n          case 6:\n            _yield$web3$eth$getAc = _context3.sent;\n            _yield$web3$eth$getAc2 = _slicedToArray(_yield$web3$eth$getAc, 1);\n            account = _yield$web3$eth$getAc2[0];\n            _context3.next = 11;\n            return web3.eth.getBalance(account);\n\n          case 11:\n            ethBalance = _context3.sent;\n            ethBalanceData = {\n              wei: ethBalance,\n              balance: web3.utils.fromWei(ethBalance, \"Ether\")\n            };\n            _context3.next = 15;\n            return loadContract(Token);\n\n          case 15:\n            token = _context3.sent;\n            _context3.next = 18;\n            return token.methods.balanceOf(account).call();\n\n          case 18:\n            tokenBalance = _context3.sent;\n            tokenBalanceData = {\n              wei: tokenBalance,\n              balance: web3.utils.fromWei(tokenBalance, \"Ether\")\n            };\n            return _context3.abrupt(\"return\", {\n              account: account,\n              ethBalanceData: ethBalanceData,\n              tokenBalanceData: tokenBalanceData\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getBlockchainData() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var buyTokens = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account, etherAmount) {\n    var ethSwapContract, etherWei, hash;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return loadContract(EthSwap);\n\n          case 2:\n            ethSwapContract = _context4.sent;\n            etherWei = window.web3.utils.toWei(etherAmount);\n            _context4.next = 6;\n            return ethSwapContract.methods.buyTokens().send({\n              from: account,\n              value: etherWei\n            });\n\n          case 6:\n            hash = _context4.sent;\n            location.reload();\n            return _context4.abrupt(\"return\", hash);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function buyTokens(_x2, _x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var sellTokens = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(account, tokenAmount) {\n    var ethSwapContract, tokenWei, tokenContract, hash;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return loadContract(EthSwap);\n\n          case 2:\n            ethSwapContract = _context5.sent;\n            tokenWei = window.web3.utils.toWei(tokenAmount);\n            _context5.next = 6;\n            return loadContract(Token);\n\n          case 6:\n            tokenContract = _context5.sent;\n            console.log(ethSwapContract._address);\n            _context5.next = 10;\n            return tokenContract.methods.approve(ethSwapContract._address, tokenWei).send({\n              from: account\n            });\n\n          case 10:\n            _context5.next = 12;\n            return ethSwapContract.methods.sellTokens(tokenWei).send({\n              from: account\n            });\n\n          case 12:\n            hash = _context5.sent;\n            location.reload();\n            return _context5.abrupt(\"return\", hash);\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function sellTokens(_x4, _x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/renanlopes/Documents/workspace/witcher/solidity-react/src/services/blockchain-service.js"],"names":["Web3","EthSwap","Token","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadContract","data","eth","net","getId","networkId","contractData","networks","contract","Contract","abi","address","getBlockchainData","getAccounts","account","getBalance","ethBalance","ethBalanceData","wei","balance","utils","fromWei","token","methods","balanceOf","call","tokenBalance","tokenBalanceData","buyTokens","etherAmount","ethSwapContract","etherWei","toWei","send","from","value","hash","location","reload","sellTokens","tokenAmount","tokenWei","tokenContract","console","log","_address","approve"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\n\nexport const loadWeb3 = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    window.alert(\n      \"Non-Ethereum brower detected. You should consider trying MetaMask!\",\n    );\n  }\n};\n\nconst loadContract = async (data) => {\n  // MetaMask Network ID\n  const networkId = await web3.eth.net.getId();\n\n  const contractData = data.networks[networkId];\n  let contract;\n  if (contractData) {\n    contract = new web3.eth.Contract(data.abi, contractData.address);\n  } else {\n    window.alert(\"Contract not deployed to detected network\");\n  }\n\n  return contract;\n};\n\nexport const getBlockchainData = async () => {\n  if (!window.web3.eth) {\n    await loadWeb3();\n  }\n\n  const web3 = window.web3;\n  const [account] = await web3.eth.getAccounts();\n\n  const ethBalance = await web3.eth.getBalance(account);\n  const ethBalanceData = {\n    wei: ethBalance,\n    balance: web3.utils.fromWei(ethBalance, \"Ether\"),\n  };\n\n  const token = await loadContract(Token);\n  const tokenBalance = await token.methods.balanceOf(account).call();\n\n  const tokenBalanceData = {\n    wei: tokenBalance,\n    balance: web3.utils.fromWei(tokenBalance, \"Ether\"),\n  };\n\n  return {\n    account,\n    ethBalanceData,\n    tokenBalanceData,\n  };\n};\n\nexport const buyTokens = async (account, etherAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const etherWei = window.web3.utils.toWei(etherAmount);\n\n  const hash = await ethSwapContract.methods\n    .buyTokens()\n    .send({ from: account, value: etherWei });\n  location.reload();\n\n  return hash;\n};\n\nexport const sellTokens = async (account, tokenAmount) => {\n  const ethSwapContract = await loadContract(EthSwap);\n  const tokenWei = window.web3.utils.toWei(tokenAmount);\n\n  const tokenContract = await loadContract(Token);\n  console.log(ethSwapContract._address);\n  await tokenContract.methods\n    .approve(ethSwapContract._address, tokenWei)\n    .send({ from: account });\n\n  const hash = await ethSwapContract.methods\n    .sellTokens(tokenWei)\n    .send({ from: account });\n\n  location.reload();\n\n  return hash;\n};\n"]},"metadata":{},"sourceType":"module"}